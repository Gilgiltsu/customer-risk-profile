name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenche le déploiement sur la branche principale

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code (Full Clone)
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Clone complet pour éviter l'erreur "shallow clone"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt

    - name: Run tests
      run: |
        pytest api/test_api.py  # Exécute les tests unitaires avec Pytest

    - name: Deploy to Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: customer-risk-profile
      run: |
        # Installer la CLI Heroku
        curl https://cli-assets.heroku.com/install.sh | sh
        
        # Vérifier l'installation d'Heroku CLI
        heroku --version || { echo "Heroku CLI installation failed"; exit 1; }

        # Authentification Heroku
        echo "Authentification Heroku..."
        echo $HEROKU_API_KEY | heroku auth:token

        # Configuration de l'authentification Git avec Heroku via .netrc
        echo "machine git.heroku.com" > ~/.netrc
        echo "  login api_key" >> ~/.netrc
        echo "  password $HEROKU_API_KEY" >> ~/.netrc
        chmod 600 ~/.netrc

        # Vérification que l'application existe sur Heroku
        heroku apps:info -a $HEROKU_APP_NAME || { echo "Heroku app $HEROKU_APP_NAME not found"; exit 1; }

        # Ajout du remote Heroku
        echo "Ajout du remote Heroku..."
        git remote remove heroku || true
        git remote add heroku https://git.heroku.com/$HEROKU_APP_NAME.git

        # Vérification du remote
        git remote -v | grep heroku || { echo "Heroku remote not set correctly"; exit 1; }

        # Vérification et correction d'un clone "shallow"
        git fetch --all --unshallow || echo "Repo already unshallow"

        # Vérification que le HEAD est bien valide
        git rev-parse HEAD || { echo "Invalid Git HEAD"; exit 1; }

        # Configurer Git
        git config --global user.name "Gilgiltsu"
        git config --global user.email "telli.gilles@gmail.com"

        # Empêcher Git de demander un mot de passe
        export GIT_ASKPASS=/bin/echo
        export HEROKU_API_KEY=$HEROKU_API_KEY

        # Commit & push vers Heroku
        git add .
        git commit -m "Deploy from GitHub Actions" || echo "No changes to commit"

        echo "Pushing to Heroku..."
        git push heroku main || { echo "Deployment failed"; exit 1; }

        echo "Deployment successful!"
